<?php
// config.php
// Database credentials
define('DB_HOST', 'localhost');
define('DB_NAME', 'auth_db');
define('DB_USER', 'auth_user');
define('DB_PASS', 'secure_password'); 

// Application settings
define('APP_NAME', 'Secure Auth Module');

// Rate Limiting settings
define('MAX_FAILED_ATTEMPTS', 5);
define('ACCOUNT_LOCK_TIME', 300); // Account lock duration in seconds (5 minutes)

// Logging settings
define('LOG_FILE', __DIR__ . '/auth_log.txt');

// Session settings
ini_set('session.cookie_httponly', 1);
ini_set('session.cookie_secure', 1);
ini_set('session.use_strict_mode', 1);
ini_set('session.use_only_cookies', 1);
session_set_cookie_params([
    'lifetime' => 3600, // Session lifetime in seconds (1 hour)
    'path' => '/',
    'domain' => '', // Set your domain here, e.g., '.yourdomain.com'
    'secure' => true,
    'httponly' => true,
    'samesite' => 'Lax'
]);
?>

sql
-- db_setup.sql
CREATE DATABASE IF NOT EXISTS auth_db;

USE auth_db;

CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    failed_attempts INT DEFAULT 0,
    locked_until DATETIME NULL
);

CREATE TABLE IF NOT EXISTS login_attempts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NULL,
    username_attempt VARCHAR(255) NOT NULL,
    ip_address VARCHAR(45) NOT NULL,
    attempt_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    success BOOLEAN NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL
);

-- Example user: username='testuser', password='password123'
-- Hash generated by password_hash('password123', PASSWORD_BCRYPT);
INSERT IGNORE INTO users (username, password) VALUES ('testuser', '$2y$10$eE0mO2sU.fR/L9zS6P.bVes1o7N4C3Q2A1X0W9V8U7T6R5Q4P3O2I');

<?php
// login.php
require_once 'config.php';

session_start();

if (isset($_SESSION['user_id'])) {
    header('Location: dashboard.php');
    exit;
}

$pdo = null;

try {
    $dsn = 'mysql:host=' . DB_HOST . ';dbname=' . DB_NAME . ';charset=utf8mb4';
    $options = [
        PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
        PDO::ATTR_EMULATE_PREPARES   => false,
    ];
    $pdo = new PDO($dsn, DB_USER, DB_PASS, $options);
} catch (PDOException $e) {
    error_log('Database connection error: ' . $e->getMessage(), 0);
    die('An unexpected error occurred. Please try again later.');
}

function log_auth_attempt($pdo, $username_attempt, $ip_address, $success, $user_id = null) {
    try {
        $stmt = $pdo->prepare("INSERT INTO login_attempts (user_id, username_attempt, ip_address, success) VALUES (?, ?, ?, ?)");
        $stmt->execute([$user_id, $username_attempt, $ip_address, $success]);
    } catch (PDOException $e) {
        error_log('Error logging authentication attempt to DB: ' . $e->getMessage(), 0);
    }

    $log_message = sprintf(
        "[%s] IP: %s | User Attempt: %s | Success: %s | User ID: %s\n",
        date('Y-m-d H:i:s'),
        $ip_address,
        $username_attempt,
        $success ? 'TRUE' : 'FALSE',
        $user_id ?? 'N/A'
    );
    file_put_contents(LOG_FILE, $log_message, FILE_APPEND);
}

$error_message = '';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = filter_input(INPUT_POST, 'username', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
    $password = $_POST['password'] ?? '';

    if (empty($username) || empty($password)) {
        $error_message = 'Please enter both username and password.';
    } else {
        if (strlen($username) < 3 || strlen($username) > 50) {
            $error_message = 'Invalid username or password.';
        } else {
            $ip_address = $_SERVER['REMOTE_ADDR'] ?? 'UNKNOWN';

            $stmt = $pdo->prepare("SELECT id, username, password, failed_attempts, locked_until FROM users WHERE username = ?");
            $stmt->execute([$username]);
            $user = $stmt->fetch();

            if ($user) {
                if ($user['locked_until'] !== null && strtotime($user['locked_until']) > time()) {
                    $error_message = 'Account is locked. Please try again later.';
                    log_auth_attempt($pdo, $username, $ip_address, false, $user['id']);
                } else {
                    if (password_verify($password, $user['password'])) {
                        $stmt = $pdo->prepare("UPDATE users SET failed_attempts = 0, locked_until = NULL WHERE id = ?");
                        $stmt->execute([$user['id']]);

                        log_auth_attempt($pdo, $username, $ip_address, true, $user['id']);

                        session_regenerate_id(true);
                        $_SESSION['user_id'] = $user['id'];
                        $_SESSION['username'] = $user['username'];
                        $_SESSION['last_activity'] = time();

                        header('Location: dashboard.php');
                        exit;
                    } else {
                        $error_message = 'Invalid username or password.';
                        $failed_attempts = $user['failed_attempts'] + 1;

                        if ($failed_attempts >= MAX_FAILED_ATTEMPTS) {
                            $locked_until = date('Y-m-d H:i:s', time() + ACCOUNT_LOCK_TIME);
                            $stmt = $pdo->prepare("UPDATE users SET failed_attempts = ?, locked_until = ? WHERE id = ?");
                            $stmt->execute([$failed_attempts, $locked_until, $user['id']]);
                            $error_message = 'Invalid username or password. Your account has been locked due to too many failed attempts.';
                        } else {
                            $stmt = $pdo->prepare("UPDATE users SET failed_attempts = ? WHERE id = ?");
                            $stmt->execute([$failed_attempts, $user['id']]);
                        }
                        log_auth_attempt($pdo, $username, $ip_address, false, $user['id']);
                    }
                }
            } else {
                $error_message = 'Invalid username or password.';
                log_auth_attempt($pdo, $username, $ip_address, false);
            }
        }
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php echo htmlspecialchars(APP_NAME); ?> - Login</title>
</head>
<body>
    <div>
        <h2>Login</h2>
        <?php if ($error_message): ?>
            <p style="color: red;"><?php echo htmlspecialchars($error_message); ?></p>
        <?php endif; ?>
        <form action="login.php" method="POST">
            <div>
                <label for="username">Username:</label>
                <input type="text" id="username" name="username" required>
            </div>
            <div>
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" required>
            </div>
            <div>
                <button type="submit">Login</button>
            </div>
        </form>
    </div>
</body>
</html>

<?php
// dashboard.php
require_once 'config.php';
session_start();

if (!isset($_SESSION['user_id']) || !isset($_SESSION['username'])) {
    header('Location: login.php');
    exit;
}

if (isset($_SESSION['last_activity']) && (time() - $_SESSION['last_activity'] > 3600)) {
    session_unset();
    session_destroy();
    header('Location: login.php?message=Session expired.');
    exit;
}
$_SESSION['last_activity'] = time();
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php echo htmlspecialchars(APP_NAME); ?> - Dashboard</title>
</head>
<body>
    <div>
        <h2>Welcome to the Dashboard, <?php echo htmlspecialchars($_SESSION['username']); ?>!</h2>
        <p>This is a protected page. You are successfully logged in.</p>
        <p><a href="logout.php">Logout</a></p>
    </div>
</body>
</html>

<?php
// logout.php
require_once 'config.php';
session_start();

$_SESSION = array();

if (ini_get("session.use_cookies")) {
    $params = session_get_cookie_params();
    setcookie(session_name(), '', time() - 42000,
        $params["path"], $params["domain"],
        $params["secure"], $params["httponly"]
    );
}

session_destroy();

header('Location: login.php');
exit;
?>